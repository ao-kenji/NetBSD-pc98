/*	$NecBSD: vmocs.c.object,v 1.3 1998/02/08 08:01:49 kmatsuda Exp $	*/
/*	$NetBSD$	*/

#include <sys/param.h>
#include <sys/time.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/buf.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/fcntl.h>
#include <sys/ioctl.h>
#include <sys/sysctl.h>
#include <sys/device.h>
#include <vm/vm.h>
#include <time.h>
#include <nlist.h>
#include <kvm.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <paths.h>
#include <limits.h>
#include <vm/vm_object.h>
#include <vm/vm_pager.h>
#include <vm/swap_pager.h>

#define NEWVM			/* XXX till old has been updated or purged */
struct nlist namelist[] = {
	{ "_vm_object_list"},
	{ "" },
};

/* Objects defined in dkstats.c */
kvm_t *kd;
char	*nlistf, *memf;

main(argc, argv)
	register int argc;
	register char **argv;
{
	extern int optind;
	extern char *optarg;
	register int c, todo;
	u_int interval;
	int reps;
        char errbuf[_POSIX2_LINE_MAX];

	memf = nlistf = NULL;
	interval = reps = todo = 0;

	if (nlistf != NULL || memf != NULL)
		setgid(getgid());

        kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf);
	if (kd == 0) {
		(void)fprintf(stderr,
		    "vmstat: kvm_openfiles: %s\n", errbuf);
		exit(1);
	}

	if ((c = kvm_nlist(kd, namelist)) != 0) {
		if (c > 0) {
			(void)fprintf(stderr,
			    "vmstat: undefined symbols:");
			for (c = 0;
			    c < sizeof(namelist)/sizeof(namelist[0]); c++)
				if (namelist[c].n_type == 0)
					fprintf(stderr, " %s",
					    namelist[c].n_name);
			(void)fputc('\n', stderr);
		} else
			(void)fprintf(stderr, "vmstat: kvm_nlist: %s\n",
			    kvm_geterr(kd));
		exit(1);
	}

	dovmocsstat();
}

void
kread(nlx, addr, size)
	int nlx;
	void *addr;
	size_t size;
{
	char *sym;

	if (namelist[nlx].n_type == 0 || namelist[nlx].n_value == 0) {
		sym = namelist[nlx].n_name;
		if (*sym == '_')
			++sym;
		(void)fprintf(stderr,
		    "vmstat: symbol %s not defined\n", sym);
		exit(1);
	}
	if (kvm_read(kd, namelist[nlx].n_value, addr, size) != size) {
		sym = namelist[nlx].n_name;
		if (*sym == '_')
			++sym;
		(void)fprintf(stderr, "vmstat: %s: %s\n", sym, kvm_geterr(kd));
		exit(1);
	}
}

struct swpager pgdata;
int total;

void
object_print(object, pager)
	struct vm_object *object;
	vm_pager_t pager;
{

	printf("Object:	size=0x%lx, res=%d, ref=%d, flags=0x%x\n",
		(long) object->size,
		object->resident_page_count, 
		object->ref_count,
		(u_int) object->flags);
	printf("	pager=0x%lx+0x%lx, shadow=(0x%lx)+0x%lx, copy=(0x%lx)\n",
	       (long) object->pager, (long) object->paging_offset,
	       (long) object->shadow, (long) object->shadow_offset, object->copy);
	printf("	shadower=0x%lx\n", object->shadowers.lh_first);

	if (pager == NULL)
		return;
	kvm_read(kd, (vm_offset_t)(pager->pg_data), &pgdata, sizeof(pgdata));
	
	printf("	=>pager: type=%d flags=%d blocks = %d kb real = %d kb total = %dkb\n",
		pager->pg_type, pager->pg_flags, 
		pgdata.sw_bsize * pgdata.sw_nblocks / 2, pgdata.sw_cnt * 4, total);
	total += pgdata.sw_cnt * 4;
}


TAILQ_HEAD(object_q, vm_object);
struct object_q obj_q;
struct vm_object obj;
struct pager_struct pg;

int
dovmocsstat(interval, reps)
	u_int interval;
	int reps;
{
	struct vm_object *object = &obj;
	int no;
	vm_offset_t ofs;
	vm_pager_t pager;
	register vm_page_t	p;
	char			*delim;
	vm_object_t		o;
	register int count;
	extern int		indent;


	kread(0, &obj_q, sizeof(obj_q));
	ofs = (vm_offset_t) obj_q.tqh_first;
	no = 0;
	for ( ; ofs != NULL; ofs = (vm_offset_t) object->object_list.tqe_next)
	{
		bzero(object, sizeof(*object));
		kvm_read(kd, ofs, object, sizeof(*object));
		if (object->pager != NULL)
		{
			pager = &pg;
			bzero(pager, sizeof(*pager));
			kvm_read(kd, (vm_offset_t) object->pager, pager, 
				sizeof(*pager));
		}
		else
			pager = NULL;
			
/*
		if ((object->flags & 0x04) == 0)
		{
			printf("=OBJECT INFO %d (0x%x)=\n", ++ no, ofs);
			object_print(object, pager);
		}
*/
/*
		if (object->ref_count == 1 && object->shadowers.lh_first != NULL)
		{
			if (pager != NULL && pager->pg_type != 0)
				continue;
			printf("=OBJECT INFO %d (0x%x)=\n", ++ no, ofs);
			object_print(object, pager);
		}
		if (pager != NULL && pager->pg_type == 0 &&
			object->shadowers.lh_first != NULL)
		{
			printf("=OBJECT INFO %d (0x%x)=\n", ++ no, ofs);
			object_print(object, pager);
		}
*/
		if (pager != NULL && pager->pg_type == 0) 
		{
			printf("=OBJECT INFO %d (0x%x)=\n", ++ no, ofs);
			object_print(object, pager);
		}
/*
		if (pager != NULL && pager->pg_type == 0 &&
		    (object->flags & 0x04) == 0 && 
		    (object->shadow == NULL) && (object->shadowers.lh_first == NULL))
		if (pager != NULL && pager->pg_type == 0)
		{
			printf("=OBJECT INFO %d (0x%x)=\n", ++ no, ofs);
			object_print(object, pager);
		}
*/
	}
}
